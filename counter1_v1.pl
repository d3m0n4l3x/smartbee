#!/usr/bin/perl -w
#Counter1, v1, Updated on 20171209
#Count the quantity of Attacker IP addresses and Attacked Services.
#Furthermore, specify the Start Date and End Date of the log file.
#And indicate that which date there are the most attacks happening.
$|=1;
$version='V1';


sub show_start_date_and_end_date(@){
	@sample1=@_;
	#print "@sample1\n";						#Debug
	$amount_sample1=@sample1;
	print "There are $amount_sample1 records.\n";
	$first_record=$sample1[0];
	#print "\$first_record: $first_record\n";			#Debug
	$last_record=$sample1[$amount_sample1-1];
	#print "\$last_record: $last_record\n";				#Debug
	if($first_record=~/(.*)-(.*),(.*)-(.*),(.*),(.*),(.*),(.*),(.*)/){
		$start_date="$1-$2-$4";
	}
	if($last_record=~/(.*)-(.*),(.*)-(.*),(.*),(.*),(.*),(.*),(.*)/){
		$end_date="$1-$2-$4";
	}
	print "Start Date: $start_date\n";
	print "End Date: $end_date\n";
	return;
}


sub sort_top_10_attackers_ip(@){
	@sample2=@_;
	undef(@attackers_ip); @attackers_ip=();
	foreach $sample2_each_line (@sample2){
		if($sample2_each_line=~/(.*),(.*),(.*),(.*),(.*),(.*),(.*)/){
			$an_attacker_ip=$4;
			push @attackers_ip, $an_attacker_ip;
		}
	}
	undef(%sample2_count1); %sample2_count1=();
	undef(%sample2_attackers_ip); %sample2_attackers_ip=();
	$sample2_count1{$_}++ foreach @attackers_ip;
	while(($key_sample2, $value_sample2)=each(%sample2_count1)){
		#print "$key_sample2 : $value_sample2\n";			#Debug
		$sample2_attackers_ip{$key_sample2}=$value_sample2;
	}
=head
%planets = (
   Mercury => 0.4,
   Venus   => 0.7,
   Earth   => 1,
   Mars    => 1.5,
   Ceres   => 2.77,
   Jupiter => 5.2,
   Saturn  => 9.5,
   Uranus  => 19.6,
   Neptune => 30,
   Pluto   => 39,
   Charon  => 39,
);
foreach my $name (sort { $planets{$a} <=> $planets{$b} } keys %planets) {
	printf "%-8s %s\n", $name, $planets{$name};
}
#Output:
0.4
0.7
1
1.5
2.77
5.2
9.5
19.6
30
39
39
=cut
	print "--------------------------------\n";
	print "Attackers\' IP Addresses Top 10:\n";
	print "--------------------------------\n";
	$sample2_repeat_counter1=1;
	ATTACKERS_IP_TOP_10: foreach $name (sort { $sample2_attackers_ip{$b} <=> $sample2_attackers_ip{$a} } keys %sample2_attackers_ip) {
		if($sample2_repeat_counter1<=10){
			printf "%-16s : %s times\n", $name, $sample2_attackers_ip{$name};
			$sample2_repeat_counter1++;
		}else{
			last ATTACKERS_IP_TOP_10;
		}
	}

	return;
}


sub sort_top_10_attacked_ports(@){
	@sample3=@_;
	undef(@attacked_ports); @attacked_ports=();
	foreach $sample3_each_line (@sample3){
		if($sample3_each_line=~/(.*),(.*),(.*),(.*),(.*),(.*),(.*)/){
			$an_attacked_port=$7;
			push @attacked_ports, $an_attacked_port;
		}
	}
	undef(%sample3_count1); %sample3_count1=();
	undef(%sample3_attacked_ports); %sample3_attacked_ports=();
	$sample3_count1{$_}++ foreach @attacked_ports;
	while(($key_sample3, $value_sample3)=each(%sample3_count1)){
		#print "$key_sample3 : $value_sample3\n";			#Debug
		$sample3_attacked_ports{$key_sample3}=$value_sample3;
	}
	print "--------------------------------\n";
	print "Attacked Ports Top 10:\n";
	print "--------------------------------\n";
	$sample3_repeat_counter1=1;
	ATTACKED_PORTS_TOP_10: foreach $name (sort { $sample3_attacked_ports{$b} <=> $sample3_attacked_ports{$a} } keys %sample3_attacked_ports) {
		if($sample3_repeat_counter1<=10){
			printf "%-6s : %s times\n", $name, $sample3_attacked_ports{$name};
			$sample3_repeat_counter1++;
		}else{
			last ATTACKED_PORTS_TOP_10;
		}
	}

	return;
}


sub sort_top_10_event_dates(@){
	@sample4=@_;
	undef(@event_dates); @event_dates=();
	foreach $sample4_each_line (@sample4){
		if($sample4_each_line=~/(.*),(.*),(.*),(.*),(.*),(.*),(.*)/){
			$an_event_date=$2;
			push @event_dates, $an_event_date;
		}
	}
	undef(%sample4_count1); %sample4_count1=();
	undef(%sample4_event_dates); %sample4_event_dates=();
	$sample4_count1{$_}++ foreach @event_dates;
	while(($key_sample4, $value_sample4)=each(%sample4_count1)){
		#print "$key_sample4 : $value_sample4\n";			#Debug
		$sample4_event_dates{$key_sample4}=$value_sample4;
	}
	print "--------------------------------\n";
	print "Event Dates Top 10:\n";
	print "--------------------------------\n";
	$sample4_repeat_counter1=1;
	EVENT_DATES_TOP_10: foreach $name (sort { $sample4_event_dates{$b} <=> $sample4_event_dates{$a} } keys %sample4_event_dates) {
		if($sample4_repeat_counter1<=10){
			printf "%-6s : %s times\n", $name, $sample4_event_dates{$name};
			$sample4_repeat_counter1++;
		}else{
			last EVENT_DATES_TOP_10;
		}
	}

	return;
}




#Main() function
print "This is a portion of SmartBee Analytical Engine $version for analyzing the log generated by FatBee!!!\n";
$all_log=shift || '/usr/local/sbin/fatbee/correlation/all.log';
print "The analyzed log is at $all_log.\n";
#By default, the log file is located at /usr/local/sbin/fatbee/correlation/all.log.
=head
An example of the all.log's content:
2017-Dec,Dec-8,tcp,186.222.119.127,58400,0.0.0.0,80
2017-Dec,Dec-8,tcp,186.222.119.127,58403,0.0.0.0,80
2017-Dec,Dec-8,tcp,186.222.119.127,58408,0.0.0.0,80
2017-Dec,Dec-8,tcp,5.188.87.7,60000,0.0.0.0,80
2017-Dec,Dec-8,tcp,5.167.82.130,60916,0.0.0.0,21
2017-Dec,Dec-9,tcp,45.77.184.127,48644,0.0.0.0,80
=cut

open(ALL_LOG, "$all_log");
@all_log=<ALL_LOG>;
chomp(@all_log);
close(ALL_LOG);

#print "@all_log\n";							#Debug

&show_start_date_and_end_date(@all_log);
&sort_top_10_attackers_ip(@all_log);
&sort_top_10_attacked_ports(@all_log);
&sort_top_10_event_dates(@all_log);
exit(1);
